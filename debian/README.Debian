equivs for DEBIAN
-----------------

This is a package, that creates Debian packages that can be 
used to inform dpkg about localy installed packages and their 
dependencies. Also empty packages that just require other packages
can be created with equivs. These can be used as "profile" packages 
that just mark otherones for installation.

Please note that this is a crude hack and if thoughtlessly used
might possibly do damage to your packaging system. And please
note as well that using it is not the recommended way of dealing
with broken dependencies. Better file a bug report instead.

In contrast to prior versions of equivs, it does not recreate the 
equivs package, but creates new dummy packages.

History of the package:  (by Paul Seelig)
-----------------------

I once made this package based on my preference to run my own
installation of teTeX in "/usr/local/" because i didn't want to
depend on any package maintainer's update frequency. On the other
hand i still wanted to take advantage of other TeX/LaTeX packages
which depend upon the Debian teTeX packages. While Debian's teTeX
maintainer does an incredibly fine job i wanted to be able to
take advantage of Thomas Esser's update shell scripts as soon as
they come out. In this very special case the needed "Provides:"
field of the 'equivs' control file had to contain the entries
"tetex-base, tetex-bin, tetex-dev, tetex-doc, tetex-extra".

The idea for this package is BTW based upon an article in the
teTeX mailing list by Markus Dickebohm <m.dickebohm@uni-koeln.de>
on 10 Dec 1996 21:40:50 +0100 with the subject "Re: [TETEX 1551]
teTeX  for Debian Linux?".  Thanks a lot, Markus! :-)

How to use this package:
------------------------

When you call the "equivs-build" program, it will create a 
subdirectory "equivs", containing the files necessary to create
a Debian package and build that package.

You need a control file for make-equivs. You will find examples
of control files in /usr/doc/equivs/examples.

The control file has a structure like the control files in "real"
Debian packages, but it doesn't have to define all keys, as default 
ones will be used, if you omit one.

There are four additional fields that can be used:

- Changelog: file to be used as the changelog

- Version: if you don't use a local changelog, equivs will create a 
           dummy one. As the version of the package is defined in the
           changelog, equivs will asume the version 1.0. With this
           field, you can set an explicit version.

- Readme: a file to be used as the README.Debian file. You can use the
          strings §packagename§ and §depends§ to insert the package
          name and the dependency information used.

- Copyright: the copyright file to by used. If ommited, the GPL 2 
             will be used.

- Extra-Files: A comma-seperated list of files to copy to the
               /usr/doc/packagename directory.


Check the Debian Packaging Manual Chapter 8, if you are unsure 
about the different level of package relationsships (dependencies)
http://www.debian.org/doc/packaging-manuals/packaging.html/ch-relationships.html 
, also available in the packaging-manual package.

You can create full packages, suitable for a upload 
to the Debian servers. To do this, use the option 
--full or -f, and equivs-build will use debuild to create the package.

The ID used to signed is taken from, in that order, the User from 
the last entry of a supplied changelog, the Maintainer: field in the 
equivs control file, the local username.

 
The program "equivs-control" will create a dummy control file
you have to alter to be useful. 

So to use equivs, you do:

a. cd /tmp

b.1. equivs-control ns-control
or
b.2. cp /usr/doc/equivs/examples/<a control file> ns-control

c. edit ns-control

d. equivs-build ns-control

e. su -

f. dpkg -i /tmp/ns-dummy_1.0_all.deb

Deinstallation of this package is only possible when all pending
dependency issues are properly resolved in some other way.

Martin Bialasinski <martinb@debian.org>,  Mon,  4 Jan 1999 12:35:16 +0100
